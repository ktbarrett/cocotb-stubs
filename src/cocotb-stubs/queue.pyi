import asyncio.queues
from typing import Generic, TypeVar

class QueueFull(asyncio.queues.QueueFull): ...
class QueueEmpty(asyncio.queues.QueueEmpty): ...

T = TypeVar("T")

class Queue(Generic[T]):
    def __init__(self, maxsize: int = ...) -> None: ...
    def qsize(self) -> int: ...
    @property
    def maxsize(self) -> int: ...
    def empty(self) -> bool: ...
    def full(self) -> bool: ...
    async def put(self, item: T) -> None: ...
    def put_nowait(self, item: T) -> None: ...
    async def get(self) -> T: ...
    def get_nowait(self) -> T: ...

class PriorityQueue(Queue): ...
class LifoQueue(Queue): ...
