import abc
from typing import Any, Callable, Generator, Generic, TypeVar

T_co = TypeVar("T_co")
YieldT = TypeVar("YieldT")

def capture(fn: Callable[..., T_co], *args: Any, **kwargs: Any) -> Outcome[T_co]: ...

class Outcome(Generic[T_co], metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def send(self, gen: Generator[YieldT, T_co, Any]) -> YieldT: ...
    @abc.abstractmethod
    def get(self) -> T_co: ...

class Value(Outcome[T_co]):
    @property
    def value(self) -> T_co: ...
    def __init__(self, value: T_co) -> None: ...
    def send(self, gen: Generator[YieldT, T_co, Any]) -> YieldT: ...
    def get(self) -> T_co: ...

class Error(Outcome[T_co]):
    @property
    def error(self) -> BaseException: ...
    def __init__(self, error: BaseException) -> None: ...
    def send(self, gen: Generator[YieldT, T_co, Any]) -> YieldT: ...
    def get(self) -> T_co: ...
