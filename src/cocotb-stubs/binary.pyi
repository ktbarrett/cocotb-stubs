from typing import Protocol

class BinaryRepresentation:
    UNSIGNED: int
    SIGNED_MAGNITUDE: int
    TWOS_COMPLEMENT: int

class SupportsInt(Protocol):
    def __int__(self) -> int: ...

class BinaryValue:
    big_endian: bool
    binaryRepresentation: BinaryRepresentation
    def __init__(
        self,
        value: int | str | None = ...,
        n_bits: int | None = ...,
        bigEndian: bool = ...,
        binaryRepresentation: BinaryRepresentation = ...,
    ) -> None: ...
    def assign(self, value: str | int | bytes) -> None: ...
    @property
    def integer(self) -> int: ...
    @integer.setter
    def integer(self, val: int) -> None: ...
    @property
    def signed_integer(self) -> int: ...
    @signed_integer.setter
    def signed_integer(self, val: int) -> None: ...
    @property
    def is_resolvable(self) -> bool: ...
    @property
    def buff(self) -> bytes: ...
    @buff.setter
    def buff(self, val: bytes) -> None: ...
    @property
    def binstr(self) -> str: ...
    @binstr.setter
    def binstr(self, string: str) -> None: ...
    @property
    def n_bits(self) -> int: ...
    def hex(self) -> str: ...
    def __bool__(self) -> bool: ...
    def __int__(self) -> int: ...
    def __add__(self, other: SupportsInt) -> BinaryValue: ...
    def __iadd__(self, other: SupportsInt) -> BinaryValue: ...
    def __radd__(self, other: SupportsInt) -> BinaryValue: ...
    def __sub__(self, other: SupportsInt) -> BinaryValue: ...
    def __isub__(self, other: SupportsInt) -> BinaryValue: ...
    def __rsub__(self, other: SupportsInt) -> BinaryValue: ...
    def __mul__(self, other: SupportsInt) -> BinaryValue: ...
    def __imul__(self, other: SupportsInt) -> BinaryValue: ...
    def __rmul__(self, other: SupportsInt) -> BinaryValue: ...
    def __floordiv__(self, other: SupportsInt) -> BinaryValue: ...
    def __ifloordiv__(self, other: SupportsInt) -> BinaryValue: ...
    def __rfloordiv__(self, other: SupportsInt) -> BinaryValue: ...
    def __divmod__(self, other: SupportsInt) -> BinaryValue: ...
    def __rdivmod__(self, other: SupportsInt) -> BinaryValue: ...
    def __mod__(self, other: SupportsInt) -> BinaryValue: ...
    def __imod__(self, other: SupportsInt) -> BinaryValue: ...
    def __rmod__(self, other: SupportsInt) -> BinaryValue: ...
    def __pow__(self, other: SupportsInt) -> BinaryValue: ...
    def __ipow__(self, other: SupportsInt) -> BinaryValue: ...
    def __rpow__(self, other: SupportsInt) -> BinaryValue: ...
    def __lshift__(self, other: SupportsInt) -> BinaryValue: ...
    def __ilshift__(self, other: SupportsInt) -> BinaryValue: ...
    def __rlshift__(self, other: SupportsInt) -> BinaryValue: ...
    def __rshift__(self, other: SupportsInt) -> BinaryValue: ...
    def __irshift__(self, other: SupportsInt) -> BinaryValue: ...
    def __rrshift__(self, other: SupportsInt) -> BinaryValue: ...
    def __and__(self, other: SupportsInt) -> BinaryValue: ...
    def __iand__(self, other: SupportsInt) -> BinaryValue: ...
    def __rand__(self, other: SupportsInt) -> BinaryValue: ...
    def __xor__(self, other: SupportsInt) -> BinaryValue: ...
    def __ixor__(self, other: SupportsInt) -> BinaryValue: ...
    def __rxor__(self, other: SupportsInt) -> BinaryValue: ...
    def __or__(self, other: SupportsInt) -> BinaryValue: ...
    def __ior__(self, other: SupportsInt) -> BinaryValue: ...
    def __ror__(self, other: SupportsInt) -> BinaryValue: ...
    def __div__(self, other: SupportsInt) -> BinaryValue: ...
    def __idiv__(self, other: SupportsInt) -> BinaryValue: ...
    def __rdiv__(self, other: SupportsInt) -> BinaryValue: ...
    def __neg__(self) -> BinaryValue: ...
    def __pos__(self) -> BinaryValue: ...
    def __abs__(self) -> BinaryValue: ...
    def __invert__(self) -> BinaryValue: ...
    def __oct__(self) -> str: ...
    def __hex__(self) -> str: ...
    def __index__(self) -> int: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: int | slice) -> BinaryValue: ...
    def __setitem__(self, key: int | slice, val: int | str) -> None: ...
